# vim: set ft=ansible:
- hosts: ec2postgresql
  gather_facts: false
  user: ubuntu
  tasks:
    - name: Configure dirty_background_bytes
      become: true
      sysctl:
        name: vm.dirty_background_bytes
        value: 67108864
      when: dirty_pages_small is defined

    - name: Configure dirty_bytes
      become: true
      sysctl:
        name: vm.dirty_bytes
        value: 536870912
      when: dirty_pages_small is defined

    - name: Configure dirty_background_ratio
      become: true
      sysctl:
        name: vm.dirty_background_ratio
        value: 10
      when: dirty_pages_big is defined

    - name: Configure dirty_ratio
      become: true
      sysctl:
        name: vm.dirty_ratio
        value: 20
      when: dirty_pages_big is defined

    - include: install_postgres_deb.yml

    - include: nvme.yml
      when: postgresql_nvme is defined

    - name: Install pg_view dependencies
      become: yes
      apt: name={{item}}
           state=installed
      with_items:
        - python-psycopg2
        - python3-pip

    - name: Update setuptools (for pg_view)
      become: yes
      pip: name=setuptools
           executable=pip3
           state=latest
           extra_args='--upgrade'

    - name: Install pg_view
      become: yes
      pip: name=pg_view
           executable=pip3

    - name: Init db
      become: yes
      become_user: postgres
      shell: /usr/lib/postgresql/10/bin/initdb -D {{ pg_dir }}
      when: pg_dir is defined

    - name: Template Postgresql configuration file
      become: yes
      action: template
        src=templates/confs/{{ item }}.conf.j2
        dest=/etc/postgresql/10/main/{{ item }}.conf
      with_items:
        - pg_hba
        - postgresql_extend
      notify:
        - restart postgresql

    - name: Include config
      become: yes
      lineinfile:
        path: /etc/postgresql/10/main/postgresql.conf
        state: present
        line: "include 'postgresql_extend.conf'"

    - meta: flush_handlers

    - name: Create user
      postgresql_user:
        name={{ db_user }}
        password={{ db_pass }}
        role_attr_flags=CREATEDB,SUPERUSER
        state=present
        encrypted=yes
      become: yes
      become_user: postgres
      become_method: sudo
      when: pg_dir is not defined

    - name: Create user
      postgresql_user:
        name={{ db_user }}
        password={{ db_pass }}
        role_attr_flags=CREATEDB,SUPERUSER
        state=present
        encrypted=yes
        login_unix_socket=/tmp
      become: yes
      become_user: postgres
      become_method: sudo
      when: pg_dir is defined

    - name: Create user database
      postgresql_db:
        name={{ db_user }}
        login_user={{ db_user }}
        login_password={{ db_pass }}
      when: pg_dir is not defined

    - name: Create test database
      postgresql_db:
        name={{ db_name }}
        login_user={{ db_user }}
        login_password={{ db_pass }}
      when: pg_dir is not defined

    - name: Create user database
      postgresql_db:
        name={{ db_user }}
        login_user={{ db_user }}
        login_password={{ db_pass }}
        login_unix_socket=/tmp
      when: pg_dir is defined

    - name: Create test database
      postgresql_db:
        name={{ db_name }}
        login_user={{ db_user }}
        login_password={{ db_pass }}
        login_unix_socket=/tmp
      when: pg_dir is defined

    - name: Copy init sql
      template:
        src=templates/init/{{ pg_init }}.sql
        dest=/home/ubuntu/{{ pg_init }}.sql
      when: pg_init is defined

    - name: Copy pgbench sql
      template:
        src=templates/init/{{ item['file1'] }}.sql
        dest=/home/ubuntu/{{ item['file1'] }}.sql
      with_items: "{{ pgbench_script }}"
      when: pgbench_script is defined

    - name: Copy pgbench sql
      template:
        src=templates/init/{{ item['file2'] }}.sql
        dest=/home/ubuntu/{{ item['file2'] }}.sql
      with_items: "{{ pgbench_script }}"
      when: pgbench_script is defined

    - name: Run init script
      shell: psql {{ db_name }} -U {{ db_user }} < /home/ubuntu/{{ pg_init }}.sql
      when: pg_init is defined

    - name: Run init command
      shell: pgbench -i -s {{ pgbench_scale }} -U {{ db_user }} {{ db_name }}
      when: pgbench_init is defined

    - name: Start pg_view
      command: pg_view -o json > /home/ubuntu/postgresql.json &

  environment:
    PGPASSWORD: "{{ db_pass }}"

  handlers:
    - name: restart postgresql
      become: yes
      service:
        name=postgresql
        state=restarted
